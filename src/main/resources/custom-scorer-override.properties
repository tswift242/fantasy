# Use a composite model (and view) with multiple sub-models, or use a simple model.
# A composite model allows the user to score the same set of players against multiple sets of rules
# , while a simple model only supports scoring players against one set of rules.
# Acceptable values are: true, false
useCompositeModel=true

# Default player mode. The players corresponding to this mode will be displayed when the program starts.
# Acceptable values are: QB, RB, WR, K, DEF
defaultMode=QB

# Fantasy Football site to borrow program's default rules from.
# Acceptable values are: NFL, ESPN, Yahoo, CBS
defaultRules=NFL

# Keep a record of the results of scoring players against various sets of rules.
enableResultsLogging=true

# Directory which stores the results from scoring players against different sets of rules.
# By default (e.g. if this property is not assigned a value), results are stored in the
# user's home directory.
resultsDirectory=
#resultsDirectory=C:\\Users\\Swifty\\fantasyfootball-custom-scorer-results

# Use a metric to measure the similarity between 2 sets of scoring rules based on the resulting
# scores of the players.
# Note: this will be overriden to false if useCompositeModel=false.
enableMetrics=true
